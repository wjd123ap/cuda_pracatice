// Generated by gencpp from file elevation_map_msgs/InitializeRequest.msg
// DO NOT EDIT!


#ifndef ELEVATION_MAP_MSGS_MESSAGE_INITIALIZEREQUEST_H
#define ELEVATION_MAP_MSGS_MESSAGE_INITIALIZEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PointStamped.h>

namespace elevation_map_msgs
{
template <class ContainerAllocator>
struct InitializeRequest_
{
  typedef InitializeRequest_<ContainerAllocator> Type;

  InitializeRequest_()
    : type(0)
    , method(0)
    , points()  {
    }
  InitializeRequest_(const ContainerAllocator& _alloc)
    : type(0)
    , method(0)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _method_type;
  _method_type method;

   typedef std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PointStamped_<ContainerAllocator> >::other >  _points_type;
  _points_type points;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(POINTS)
  #undef POINTS
#endif
#if defined(_WIN32) && defined(NEAREST)
  #undef NEAREST
#endif
#if defined(_WIN32) && defined(LINEAR)
  #undef LINEAR
#endif
#if defined(_WIN32) && defined(CUBIC)
  #undef CUBIC
#endif

  enum {
    POINTS = 0u,
    NEAREST = 0u,
    LINEAR = 1u,
    CUBIC = 2u,
  };


  typedef boost::shared_ptr< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct InitializeRequest_

typedef ::elevation_map_msgs::InitializeRequest_<std::allocator<void> > InitializeRequest;

typedef boost::shared_ptr< ::elevation_map_msgs::InitializeRequest > InitializeRequestPtr;
typedef boost::shared_ptr< ::elevation_map_msgs::InitializeRequest const> InitializeRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::elevation_map_msgs::InitializeRequest_<ContainerAllocator1> & lhs, const ::elevation_map_msgs::InitializeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.method == rhs.method &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::elevation_map_msgs::InitializeRequest_<ContainerAllocator1> & lhs, const ::elevation_map_msgs::InitializeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace elevation_map_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f302135a60625e606dc04da1333e5b7d";
  }

  static const char* value(const ::elevation_map_msgs::InitializeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf302135a60625e60ULL;
  static const uint64_t static_value2 = 0x6dc04da1333e5b7dULL;
};

template<class ContainerAllocator>
struct DataType< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "elevation_map_msgs/InitializeRequest";
  }

  static const char* value(const ::elevation_map_msgs::InitializeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Initialization methods ,TODO add more methods.\n"
"uint8 POINTS=0\n"
"\n"
"uint8 NEAREST=0\n"
"uint8 LINEAR=1\n"
"uint8 CUBIC=2\n"
"\n"
"uint8 type\n"
"uint8 method\n"
"geometry_msgs/PointStamped[] points\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PointStamped\n"
"# This represents a Point with reference coordinate frame and timestamp\n"
"Header header\n"
"Point point\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::elevation_map_msgs::InitializeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.method);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InitializeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::elevation_map_msgs::InitializeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::elevation_map_msgs::InitializeRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "method: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.method);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ELEVATION_MAP_MSGS_MESSAGE_INITIALIZEREQUEST_H
